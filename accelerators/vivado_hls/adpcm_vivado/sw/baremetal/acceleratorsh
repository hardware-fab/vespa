/* Copyright (c) 2011-2023 Columbia University, System Level Design Group */
/* SPDX-License-Identifier: Apache-2.0 */

#include <stdio.h>
#ifndef __riscv
#include <stdlib.h>
#endif

#include "esp_accelerator.h"
#include "esp_probe.h"
#include "fixed_point.h"

#include "soc_defs.h"

//-----------------USER'S DEFINES---------------------
#define N_ACC_TYPES 11    //Number of accelerator types (11 CHStone benchmarks available)
#define N_TILES SOC_NTILES //(N_ACC_TILES+3)  //Number of tiles (accelerator tiles + one tile for CPU, IO and mem respectively)
#define N_ACC_TILES (N_TILES-3)    //Number of tiles containing an accelerator (SoC-specific)

#define NOC_TH 80000        //High threshold for NoC policy
#define NOC_TL 50000        //Low threshold for NoC policy
#define TIME_WINDOW 10000  //Time window for NoC policy (in us)

#define CLOCK_PERIOD 20   //Clock period of the timer (20MHz)
#define MAX_TEST_TIME 1  //Total duration of the test (in s)

//#define N_SAMPLES N_TESTS*(MAX_TEST_TIME*1000000/TIME_WINDOW) // + 1000) //Number of samples to be collected (its the number of time windows plus an offset to let the accelerators finish)

#define FREQ_MAX 19  //100MHz
#define FREQ_MIN 1   //10MHz
#define FREQ_START 9 //50MHz

#define PRINT_CHUNK 1000 //The terminal shows only 1000 lines
//----------------------------------------------------



/* Size of the contiguous chunks for scatter/gather */
#define CHUNK_SHIFT 20
#define CHUNK_SIZE BIT(CHUNK_SHIFT)
#define NCHUNK(_sz) ((_sz % CHUNK_SIZE == 0) ?		\
			(_sz / CHUNK_SIZE) :		\
			(_sz / CHUNK_SIZE) + 1)

typedef int32_t token_adpcm_t;
typedef int32_t token_aes_t;
typedef int8_t token_blowfish_t;
typedef int64_t token_dfadd_t;
typedef int64_t token_dfdiv_t;
typedef int64_t token_dfmul_t;
typedef int64_t token_dfsin_t;
typedef int16_t token_gsm_t;
typedef int32_t token_mips_t;
typedef int32_t token_motion_t;
typedef int8_t token_sha_t;

//---------------ADPCM-----------------------
#define SLD_ADPCM 0x300
#define DEV_NAME_ADPCM "sld,adpcm_vivado"

/* <<--params-->> */
extern const int32_t adpcm_n;
extern const int32_t adpcm_size;

/* User defined registers */
/* <<--regs-->> */
#define ADPCM_ADPCM_N_REG 0x44
#define ADPCM_ADPCM_SIZE_REG 0x40


//---------------AES-------------------------
#define SLD_AES 0x301
#define DEV_NAME_AES "sld,aes_vivado"

/* <<--params-->> */
extern const int32_t aes_key;
extern const int32_t aes_n;
extern const int32_t aes_text;

/* User defined registers */
/* <<--regs-->> */
#define AES_AES_KEY_REG 0x48
#define AES_AES_N_REG 0x44
#define AES_AES_TEXT_REG 0x40


//---------------BLOWFISH--------------------
#define SLD_BLOWFISH 0x302
#define DEV_NAME_BLOWFISH "sld,blowfish_vivado"

/* <<--params-->> */
extern const int32_t blowfish_n;
extern const int32_t blowfish_size;

/* User defined registers */
/* <<--regs-->> */
#define BLOWFISH_BLOWFISH_N_REG 0x44
#define BLOWFISH_BLOWFISH_SIZE_REG 0x40


//---------------DFADD-----------------------
#define SLD_DFADD 0x303
#define DEV_NAME_DFADD "sld,dfadd_vivado"

/* <<--params-->> */
extern const int32_t dfadd_out;
extern const int32_t dfadd_in;
extern const int32_t dfadd_n;

/* User defined registers */
/* <<--regs-->> */
#define DFADD_DFADD_OUT_REG 0x48
#define DFADD_DFADD_IN_REG 0x44
#define DFADD_DFADD_N_REG 0x40

//---------------DFDIV---------------------
#define SLD_DFDIV 0x304
#define DEV_NAME_DFDIV "sld,dfdiv_vivado"

/* <<--params-->> */
extern const int32_t dfdiv_n;
extern const int32_t dfdiv_in;
extern const int32_t dfdiv_out;

/* User defined registers */
/* <<--regs-->> */
#define DFDIV_DFDIV_N_REG 0x48
#define DFDIV_DFDIV_IN_REG 0x44
#define DFDIV_DFDIV_OUT_REG 0x40

//---------------DFMUL---------------------
#define SLD_DFMUL 0x305
#define DEV_NAME_DFMUL "sld,dfmul_vivado"

/* <<--params-->> */
extern const int32_t dfmul_out;
extern const int32_t dfmul_n;
extern const int32_t dfmul_in;

/* User defined registers */
/* <<--regs-->> */
#define DFMUL_DFMUL_OUT_REG 0x48
#define DFMUL_DFMUL_N_REG 0x44
#define DFMUL_DFMUL_IN_REG 0x40


//---------------DFSIN---------------------
#define SLD_DFSIN 0x306
#define DEV_NAME_DFSIN "sld,dfsin_vivado"

/* <<--params-->> */
extern const int32_t dfsin_in;
extern const int32_t dfsin_out;
extern const int32_t dfsin_n;

/* User defined registers */
/* <<--regs-->> */
#define DFSIN_DFSIN_IN_REG 0x48
#define DFSIN_DFSIN_OUT_REG 0x44
#define DFSIN_DFSIN_N_REG 0x40


//---------------GSM-----------------------
#define SLD_GSM 0x307
#define DEV_NAME_GSM "sld,gsm_vivado"

/* <<--params-->> */
extern const int32_t gsm_mlen;
extern const int32_t gsm_nlen;
extern const int32_t gsm_n;

/* User defined registers */
/* <<--regs-->> */
#define GSM_GSM_MLEN_REG 0x48
#define GSM_GSM_NLEN_REG 0x44
#define GSM_GSM_N_REG 0x40


//---------------MIPS----------------------
#define SLD_MIPS 0x308
#define DEV_NAME_MIPS "sld,mips_vivado"

/* <<--params-->> */
extern const int32_t mips_in;
extern const int32_t mips_n;
extern const int32_t mips_out;

/* User defined registers */
/* <<--regs-->> */
#define MIPS_MIPS_IN_REG 0x48
#define MIPS_MIPS_N_REG 0x44
#define MIPS_MIPS_OUT_REG 0x40


//---------------MOTION--------------------
#define SLD_MOTION 0x30a
#define DEV_NAME_MOTION "sld,motion_vivado"

/* <<--params-->> */
extern const int32_t motion_mvfs;
extern const int32_t motion_rdbfr;
extern const int32_t motion_n;
extern const int32_t motion_pwm;

/* User defined registers */
/* <<--regs-->> */
#define MOTION_MOTION_MVFS_REG 0x4c
#define MOTION_MOTION_RDBFR_REG 0x48
#define MOTION_MOTION_N_REG 0x44
#define MOTION_MOTION_PWM_REG 0x40


//---------------SHA-----------------------
#define SLD_SHA 0x309
#define DEV_NAME_SHA "sld,sha_vivado"

/* <<--params-->> */
extern const int32_t sha_vsize;
extern const int32_t sha_blocksize;
extern const int32_t sha_digest;
extern const int32_t sha_n;

/* User defined registers */
/* <<--regs-->> */
#define SHA_SHA_VSIZE_REG 0x4c
#define SHA_SHA_BLOCKSIZE_REG 0x48
#define SHA_SHA_DIGEST_REG 0x44
#define SHA_SHA_N_REG 0x40


extern const int32_t sizeof_token[N_ACC_TYPES];


void init_buf_all(uint8_t *in, uint8_t *out, unsigned in_words_adj, unsigned acc_type);
void init_size_all(unsigned *in_words_adj, unsigned * out_words_adj, unsigned * in_len, unsigned * out_len, unsigned * in_size, unsigned * out_size, unsigned * out_offset, unsigned * mem_size, int acc_type);
void config_acc_param(struct esp_device *dev, int acc_type);
void get_batch_size(unsigned *acc_batch_size, int acc_type);
int print_results(int acc_type, uint8_t *gold_in, uint8_t *out_in, unsigned out_words_adj, uint8_t *input_in);

#define N_DFMUL 20
typedef unsigned int float32;
typedef unsigned long long float64;

extern const float64 a_input[N_DFMUL];

extern const float64 b_input[N_DFMUL];

extern const float64 z_output[N_DFMUL];




#define N_DFSIN 36
extern const float64 test_in[N_DFSIN];				/* 35PI/18 */

extern const float64 test_out[N_DFSIN];				/* -0.173649 */

#define N_GSM 160
extern const short inData_gsm[N_GSM];



extern const int A[8];
extern const int outData[8];





#define N_MOTION 2048

extern const unsigned char inRdbfr[N_MOTION];
extern const int inmvfs[2][2];
extern const int inPMV[2][2][2];


extern const int outPMV[2][2][2];
extern const int outmvfs[2][2];




#define SHA_BLOCKSIZE		64

#define BLOCK_SIZE 8192
#define VSIZE 2
#define DIGEST_SIZE 5

typedef unsigned char BYTE;
typedef unsigned int INT32;

extern BYTE indata[VSIZE*BLOCK_SIZE];
extern int in_i[VSIZE];

extern const INT32 outData_SHA[5];
